AWSTemplateFormatVersion: '2010-09-09'

###### ###### ###### ###### ###### ###### ################## ###### ###### ###### ###### ###### ######
###### ###### ###### ###### ###### ###### ### PARAMETERS ### ###### ###### ###### ###### ###### ######
###### ###### ###### ###### ###### ###### ################## ###### ###### ###### ###### ###### ######

Parameters:

  SiteDomainName:
    Type: 'String'

  OriginBucketExists:
    Default: 'false'
    Type: 'String'
    AllowedValues:
      - 'true'
      - 'false'

  OriginDistributionExists:
    Default: 'false'
    Type: 'String'
    AllowedValues:
      - 'true'
      - 'false'

###### ###### ###### ###### ###### ###### ################## ###### ###### ###### ###### ###### ######
###### ###### ###### ###### ###### ###### ### CONDITIONS ### ###### ###### ###### ###### ###### ######
###### ###### ###### ###### ###### ###### ################## ###### ###### ###### ###### ###### ######

Conditions:

  CreateOriginDistribution: !Equals
    - 'true'
    - !Ref 'OriginBucketExists'

  CreateOriginDistributionOriginAccessControl: !Equals
    - 'true'
    - !Ref 'OriginDistributionExists'

###### ###### ###### ###### ###### ###### ################# ###### ###### ###### ###### ###### ######
###### ###### ###### ###### ###### ###### ### RESOURCES ### ###### ###### ###### ###### ###### ######
###### ###### ###### ###### ###### ###### ################# ###### ###### ###### ###### ###### ######

Resources:

  Certificate:
    Type: 'AWS::CertificateManager::Certificate'
    Properties:
      DomainName: !Ref 'SiteDomainName'
      ValidationMethod: 'DNS'

  LogsBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: 'Retain'
    UpdateReplacePolicy: 'Retain'
    Properties:
      BucketName: !Sub '${AWS::AccountId}-${AWS::StackName}-logs'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      LifecycleConfiguration:
        Rules:
          - Status: 'Enabled'
            ExpirationInDays: 1
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
          - Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
      OwnershipControls:
        Rules:
          - ObjectOwnership: 'BucketOwnerPreferred'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  LogsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref 'LogsBucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: 'Allow'
            Principal:
              Service: 'logging.s3.amazonaws.com'
            Resource: !Sub 'arn:${AWS::Partition}:s3:::${LogsBucket}/*'
            Condition:
              ArnLike:
                'aws:SourceArn': !GetAtt 'OriginBucket.Arn'
              StringEquals:
                'aws:SourceAccount': !Sub '${AWS::AccountId}'

  OriginBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: 'Retain'
    UpdateReplacePolicy: 'Retain'
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-origin"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: 'AES256'
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
          - Status: Enabled
            Transitions:
              - StorageClass: INTELLIGENT_TIERING
                TransitionInDays: 0
      LoggingConfiguration:
        DestinationBucketName: !Ref 'LogsBucket'
        LogFilePrefix: 'origin/'
      OwnershipControls:
        Rules:
          - ObjectOwnership: 'BucketOwnerEnforced'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: 'index.html'

  OriginBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Condition: CreateOriginDistribution
    Properties:
      Bucket: !Ref 'OriginBucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: 's3:GetObject'
            Principal:
              Service: 'cloudfront.amazonaws.com'
            Effect: 'Allow'
            Resource: !Sub '${OriginBucket.Arn}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${OriginDistribution}'

  OriginDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Condition: CreateOriginDistribution
    Properties:
      DistributionConfig:
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: 'http2'
        IPV6Enabled: true
        PriceClass: 'PriceClass_All'
        Aliases:
          - !Ref 'SiteDomainName'
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/403.html'
        DefaultCacheBehavior:
          CachePolicyId: !GetAtt 'OriginDistributionCachePolicy.Id'
          Compress: true
          OriginRequestPolicyId: !GetAtt 'OriginDistributionOriginRequestPolicy.Id'
          ResponseHeadersPolicyId: !Ref 'OriginDistributionResponseHeadersPolicy'
          TargetOriginId: !Ref 'OriginBucket'
          ViewerProtocolPolicy: 'redirect-to-https'
          LambdaFunctionAssociations:
            - EventType: 'origin-response'
              LambdaFunctionARN: !Sub 
                - '${FunctionArn}:${Version}'
                - FunctionArn: !GetAtt 'OriginResponseEdgeFunction.Arn'
                  Version: !GetAtt 'OriginResponseEdgeFunctionVersion.Version'
        Logging:
          Bucket: !GetAtt 'LogsBucket.DomainName'
          IncludeCookies: false
          Prefix: 'cloudfront/'
        Origins:
          - DomainName: !GetAtt 'OriginBucket.DomainName'
            Id: !Ref 'OriginBucket'
            S3OriginConfig: {}
            OriginAccessControlId: !If
              - CreateOriginDistributionOriginAccessControl
              - !GetAtt 'OriginDistributionOriginAccessControl.Id'
              - !Ref 'AWS::NoValue'
        ViewerCertificate:
          AcmCertificateArn: !Ref 'Certificate'
          MinimumProtocolVersion: 'TLSv1.2_2021'
          SslSupportMethod: 'sni-only'

  OriginDistributionOriginAccessControl:
    Type: 'AWS::CloudFront::OriginAccessControl'
    Condition: CreateOriginDistributionOriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-origin-distribution-oac-config'
        OriginAccessControlOriginType: 's3'
        SigningBehavior: 'always'
        SigningProtocol: 'sigv4'

  OriginDistributionCachePolicy:
    Type: 'AWS::CloudFront::CachePolicy'
    Properties:
      CachePolicyConfig:
        DefaultTTL: 31536000
        MaxTTL: 31536000
        MinTTL: 31536000
        Name: !Sub '${AWS::StackName}-origin-distribution-cache-policy'
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          CookiesConfig:
            CookieBehavior: 'none'
          HeadersConfig:
            HeaderBehavior: 'none'
          QueryStringsConfig:
            QueryStringBehavior: 'none'

  OriginDistributionOriginRequestPolicy:
    Type: 'AWS::CloudFront::OriginRequestPolicy'
    Properties:
      OriginRequestPolicyConfig:
        Name: !Sub '${AWS::StackName}-origin-distribution-origin-request-policy-config'
        CookiesConfig:
          CookieBehavior: 'none'
        HeadersConfig:
          HeaderBehavior: 'none'
        QueryStringsConfig:
          QueryStringBehavior: 'none'

  OriginDistributionResponseHeadersPolicy:
    Type: 'AWS::CloudFront::ResponseHeadersPolicy'
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub '${AWS::StackName}-origin-distribution-response-headers-policy-config'
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Override: true
            Preload: true
          ContentSecurityPolicy:
            ContentSecurityPolicy: "default-src 'none'; img-src 'self'; script-src 'self'; connect-src 'self'; style-src 'self'; object-src 'none'"
            Override: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: 'DENY'
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: 'same-origin'
            Override: true
          XSSProtection:
            ModeBlock: true
            Override: true
            Protection: true

  OriginResponseEdgeFunction:
    Type: 'AWS::Lambda::Function'
    Condition: CreateOriginDistribution
    Properties:
      FunctionName: !Sub '${AWS::StackName}-origin-response-edge-function'
      Handler: 'index.handler'
      Role: !GetAtt 'OriginResponseEdgeFunctionRole.Arn'
      Runtime: 'nodejs22.x'
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
            const response = event.Records[0].cf.response;
            if (response.status !== '200') {
              callback(null, response);
              return;
            }
            const request = event.Records[0].cf.request;
            let sMaxAge = 60 * 60;
            switch (request.uri.split('.').pop()) {
              case 'jpg':
                sMaxAge *= 24 * 365;
                break;
              default:
                sMaxAge *= 24 * 7;
            }
            response.headers['cache-control'] = [{
              key: 'Cache-Control',
              value: `max-age=${sMaxAge / 2}, public, s-maxage=${sMaxAge}`,
            }];
            callback(null, response);
          }

  OriginResponseEdgeFunctionRole:
    Type: 'AWS::IAM::Role'
    Condition: CreateOriginDistribution
    Properties:
      RoleName: !Sub '${AWS::StackName}-origin-response-edge-function-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'lambda.amazonaws.com'
            - 'edgelambda.amazonaws.com'
          Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'

  OriginResponseEdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: CreateOriginDistribution
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !GetAtt OriginResponseEdgeFunction.Arn

  Route53RecordSetGroup:
    Type: 'AWS::Route53::RecordSetGroup'
    Condition: CreateOriginDistribution
    Properties:
      HostedZoneName: !Sub '${SiteDomainName}.'
      RecordSets:
        - Name: !Ref 'SiteDomainName'
          Type: 'A'
          AliasTarget:
            DNSName: !GetAtt 'OriginDistribution.DomainName'
            EvaluateTargetHealth: false
            # The  following HosteZoneId is always used for alias records pointing to CF.
            HostedZoneId: 'Z2FDTNDATAQYW2'

###### ###### ###### ###### ###### ###### ############### ###### ###### ###### ###### ###### ######
###### ###### ###### ###### ###### ###### ### OUTPUTS ### ###### ###### ###### ###### ###### ######
###### ###### ###### ###### ###### ###### ############### ###### ###### ###### ###### ###### ######

Outputs:

  OriginBucketArn:
    Value: !GetAtt 'OriginBucket.Arn'

  OriginDistributionId:
    Condition: CreateOriginDistribution
    Value: !GetAtt 'OriginDistribution.Id'