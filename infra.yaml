AWSTemplateFormatVersion: 2010-09-09


Description: an aerosol consisting of a visible mass of miniature liquid droplets, frozen crystals, or other particles suspended in the atmosphere of a planetary body or similar space.


Parameters:
  IsCreate:
    Default: 'false'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

  DefaultBucketOnCreateObjectFunctionArn:
    Default: ''
    Type: String
    AllowedPattern: '^(arn:aws:lambda:(us-east-1|us-west-2):\d{12}:function:[A-Za-z]+[A-Za-z-]*-DefaultBucketOnCreateObjectFunction)?$'

  DefaultBucketOnOriginRequestFunctionFromFileName:
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnOriginRequest_v\d+-\d+-\d+-(file|association))?$'

  DefaultBucketOnOriginRequestFunctionFromFileSemanticVersion:
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

  DefaultBucketOnOriginRequestFunctionFromAssociationName:
    # Default: ''
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnOriginRequest_v\d+-\d+-\d+-(file|association))?$'

  DefaultBucketOnOriginRequestFunctionFromAssociationSemanticVersion:
    # Default: ''
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

########################################################################

Conditions:
  CreateLambdas: !Equals
    - 'false'
    - !Ref IsCreate
  
  DoNotCreateLambdas: !Not
    - !Condition CreateLambdas

  DefaultBucketOnCreateObjectFunctionArnDoesNotExist: !Equals
    - ''
    - !Ref DefaultBucketOnCreateObjectFunctionArn

########################################################################

Resources:
  LambdaFunctionBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-lambda-function"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DefaultBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-default"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
      NotificationConfiguration: !If
        - DefaultBucketOnCreateObjectFunctionArnDoesNotExist
        - !Ref 'AWS::NoValue'
        - LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: image
            Function: !Sub "${DefaultBucketOnCreateObjectFunctionArn}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DefaultBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DefaultBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub
                  - "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${DistributionId}"
                  - DistributionId: !GetAtt 'PrimaryDistribution.Id'
            Principal:
              Service:
                - 'cloudfront.amazonaws.com'
            Resource: !Sub
              - "arn:${AWS::Partition}:s3:::${Bucket}/*"
              - Bucket: !Ref "DefaultBucket"
  
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          Compress: true
          TargetOriginId: !Ref DefaultBucket
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations: !If
            - DoNotCreateLambdas
            - !Ref 'AWS::NoValue'
            - - EventType: origin-request
                IncludeBody: true
                LambdaFunctionARN: !Sub
                    - "${FunctionArn}:${Version}"
                    - FunctionArn: !GetAtt DefaultBucketOnOriginRequestFunctionFromAssociation.Arn
                      Version: !GetAtt DefaultBucketOnOriginRequestFunctionFromAssociationVersion.Version
        Origins:
          - Id: !Ref DefaultBucket
            S3OriginConfig:
              OriginAccessIdentity: ''
            DomainName: !Sub
              - "${Bucket}.s3.${AWS::Region}.${AWS::URLSuffix}"
              - Bucket: !Ref DefaultBucket
            OriginAccessControlId: !GetAtt DefaultBucketCloudFrontOriginAccessControl.Id
  
  DefaultBucketCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        Name: !Sub
          - "${DefaultBucket}-cloudfront-origin-access-control"
          - DefaultBucket: !Ref 'DefaultBucket'

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  DefaultBucketOnOriginRequestFunctionFromFile:
    Condition: CreateLambdas
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref DefaultBucketOnOriginRequestFunctionFromFileName
      Handler: index.handler
      Role: !GetAtt DefaultBucketOnOriginRequestFunctionRole.Arn
      Runtime: nodejs14.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-request/${Version}/index.js.zip"
          - Version: !Ref DefaultBucketOnOriginRequestFunctionFromFileSemanticVersion

  DefaultBucketOnOriginRequestFunctionFromFileVersion:
    Condition: CreateLambdas
    Type: AWS::Lambda::Version
    Properties:
      Description: !Ref DefaultBucketOnOriginRequestFunctionFromFileSemanticVersion
      FunctionName: !GetAtt DefaultBucketOnOriginRequestFunctionFromFile.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  DefaultBucketOnOriginRequestFunctionFromAssociation:
    Condition: CreateLambdas
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref DefaultBucketOnOriginRequestFunctionFromAssociationName
      Handler: index.handler
      Role: !GetAtt DefaultBucketOnOriginRequestFunctionRole.Arn
      Runtime: nodejs14.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-request/${Version}/index.js.zip"
          - Version: !Ref DefaultBucketOnOriginRequestFunctionFromAssociationSemanticVersion

  DefaultBucketOnOriginRequestFunctionFromAssociationVersion:
    Condition: CreateLambdas
    Type: AWS::Lambda::Version
    Properties:
      Description: !Ref DefaultBucketOnOriginRequestFunctionFromAssociationSemanticVersion
      FunctionName: !GetAtt DefaultBucketOnOriginRequestFunctionFromAssociation.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  DefaultBucketOnOriginRequestFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
      Policies:
        # - PolicyName: LogGroupAccess
        #   PolicyDocument:
        #     Version: 2012-10-17
        #     Statement:
        #       - Effect: Allow
        #         Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DefaultBucketOnOriginRequestFunction:*"
        #         Action:
        #           - logs:CreateLogGroup
        # - PolicyName: LogStreamAccess
        #   PolicyDocument:
        #     Version: 2012-10-17
        #     Statement:
        #       - Effect: Allow
        #         Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DefaultBucketOnOriginRequestFunction:*"
        #         Action:
        #           - logs:CreateLogStream
        #           - logs:PutLogEvents
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DefaultBucketOnOriginRequestFunction*:*"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # DefaultBucketOnCreateObjectFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub "${AWS::StackName}-DefaultBucketOnCreateObjectFunction"
  #     Handler: index.handler
  #     Role: !GetAtt DefaultBucketOnCreateObjectFunctionRole.Arn
  #     Runtime: nodejs14.x # nodejs16.x
  #     Code:
  #       S3Bucket: !Ref LambdaFunctionBucket
  #       S3Key: !Sub
  #         - "default-bucket-on-create-object/${Version}/index.js.zip"
  #         - Version: !Ref DefaultBucketOnCreateObjectFunctionSemanticVersion

  DefaultBucketOnCreateObjectFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        # - PolicyName: LogGroupAccess
        #   PolicyDocument:
        #     Version: 2012-10-17
        #     Statement:
        #       - Effect: Allow
        #         Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DefaultBucketOnCreateObjectFunction:*"
        #         Action:
        #           - logs:CreateLogGroup
        # - PolicyName: LogStreamAccess
        #   PolicyDocument:
        #     Version: 2012-10-17
        #     Statement:
        #       - Effect: Allow
        #         Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DefaultBucketOnCreateObjectFunction:*"
        #         Action:
        #           - logs:CreateLogStream
        #           - logs:PutLogEvents
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DefaultBucketOnCreateObjectFunction*:*"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents

  # DefaultBucketOnCreateObjectFunctionPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: 'lambda:InvokeFunction'
  #     FunctionName: !GetAtt DefaultBucketOnCreateObjectFunction.Arn
  #     Principal: s3.amazonaws.com
  #     SourceAccount: !Ref AWS::AccountId
  #     SourceArn: !Sub
  #       - "arn:${AWS::Partition}:s3:::${Bucket}"
  #       - Bucket: !Ref "DefaultBucket"