AWSTemplateFormatVersion: 2010-09-09


Description: an aerosol consisting of a visible mass of miniature liquid droplets, frozen crystals, or other particles suspended in the atmosphere of a planetary body or similar space.


Parameters:
  IncomingDefaultBucketOnOriginRequestFunctionName:
    Type: String
    AllowedPattern: '^abr-DefaultBucketOnOriginRequestFunction_v\d+-\d+-\d+$'

  IncomingDefaultBucketOnOriginRequestFunctionSemanticVersion:
    Type: String
    AllowedPattern: '^v\d+\.\d+\.\d+$'

  CurrentDefaultBucketOnOriginRequestFunctionName:
    Default: ''
    Type: String
    AllowedPattern: '^(abr-DefaultBucketOnOriginRequestFunction_v\d+-\d+-\d+)?$'

  # DefaultBucketOnCreateObjectFunctionArn:
  #   Default: ''
  #   Type: String
  #   AllowedValues:
  #     - ''
  #     - arn:aws:lambda:us-east-1:458362456643:function:abr-DefaultBucketOnCreateObjectFunction

  CurrentDefaultBucketOnOriginRequestFunctionSemanticVersion:
    Default: ''
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

########################################################################

Conditions:
  CurrentAndIncomingAreDifferent: !And
    - !Not
      - !Equals
        - ''
        - !Ref 'CurrentDefaultBucketOnOriginRequestFunctionName'
    - !Not
      - !Equals
        - !Ref 'IncomingDefaultBucketOnOriginRequestFunctionName'
        - !Ref 'CurrentDefaultBucketOnOriginRequestFunctionName'

########################################################################

Resources:
  LambdaFunctionBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-lambda-functions"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DefaultBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-default"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
      # NotificationConfiguration: !If
      #   - DefaultBucketOnCreateObjectFunctionDoesNotExist
      #   - !Ref 'AWS::NoValue'
      #   - LambdaConfigurations:
      #     - Event: s3:ObjectCreated:*
      #       Filter:
      #         S3Key:
      #           Rules:
      #             - Name: prefix
      #               Value: image
      #       Function: !Sub "${DefaultBucketOnCreateObjectFunctionArn}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DefaultBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DefaultBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub
                  - "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${DistributionId}"
                  - DistributionId: !GetAtt 'PrimaryDistribution.Id'
            Principal:
              Service:
                - 'cloudfront.amazonaws.com'
            Resource: !Sub
              - "arn:${AWS::Partition}:s3:::${Bucket}/*"
              - Bucket: !Ref "DefaultBucket"
  
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          Compress: true
          TargetOriginId: !Ref DefaultBucket
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-request
              IncludeBody: true
              LambdaFunctionARN: !Sub
                  - "${FunctionArn}:${Version}"
                  - FunctionArn: !GetAtt IncomingDefaultBucketOnOriginRequestFunction.Arn
                    Version: !GetAtt IncomingDefaultBucketOnOriginRequestFunctionVersion.Version
        Origins:
          - Id: !Ref DefaultBucket
            OriginAccessControlId: !GetAtt DefaultBucketCloudFrontOriginAccessControl.Id
            DomainName: !Sub
              - "${Bucket}.s3.${AWS::Region}.${AWS::URLSuffix}"
              - Bucket: !Ref DefaultBucket
            S3OriginConfig:
              OriginAccessIdentity: ''
  
  DefaultBucketCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
        Name: !Sub
          - "${DefaultBucket}-cloudfront-origin-access-control"
          - DefaultBucket: !Ref 'DefaultBucket'

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  IncomingDefaultBucketOnOriginRequestFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref IncomingDefaultBucketOnOriginRequestFunctionName
      Handler: index.handler
      Role: !GetAtt DefaultBucketOnOriginRequestFunctionRole.Arn
      Runtime: nodejs14.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-request/${Version}/index.js.zip"
          - Version: !Ref IncomingDefaultBucketOnOriginRequestFunctionSemanticVersion

  IncomingDefaultBucketOnOriginRequestFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      Description: !Ref IncomingDefaultBucketOnOriginRequestFunctionSemanticVersion
      FunctionName: !GetAtt IncomingDefaultBucketOnOriginRequestFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  CurrentDefaultBucketOnOriginRequestFunction:
    Condition: CurrentAndIncomingAreDifferent
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref CurrentDefaultBucketOnOriginRequestFunctionName
      Handler: index.handler
      Role: !GetAtt DefaultBucketOnOriginRequestFunctionRole.Arn
      Runtime: nodejs14.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-request/${Version}/index.js.zip"
          - Version: !Ref CurrentDefaultBucketOnOriginRequestFunctionSemanticVersion

  CurrentDefaultBucketOnOriginRequestFunctionVersion:
    Condition: CurrentAndIncomingAreDifferent
    Type: AWS::Lambda::Version
    Properties:
      Description: !Ref CurrentDefaultBucketOnOriginRequestFunctionSemanticVersion
      FunctionName: !GetAtt CurrentDefaultBucketOnOriginRequestFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  DefaultBucketOnOriginRequestFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
      Policies:
        - PolicyName: LogGroupAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/abr-DefaultBucketOnOriginRequestFunction:*"
                Action:
                  - logs:CreateLogGroup
        - PolicyName: LogStreamAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DefaultBucketOnOriginRequestFunction:*"
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # DefaultBucketOnCreateObjectFunction:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     FunctionName: !Sub "${AWS::StackName}-DefaultBucketOnCreateObjectFunction"
  #     Handler: index.handler
  #     Role: !GetAtt DefaultBucketOnCreateObjectFunctionRole.Arn
  #     Runtime: nodejs14.x # nodejs16.x
  #     Code:
  #       S3Bucket: !Ref LambdaFunctionBucket
  #       S3Key: !Sub
  #         - "default-bucket-on-create-object/${Version}/index.js.zip"
  #         - Version: !Ref DefaultBucketOnCreateObjectFunctionSemanticVersion

  # DefaultBucketOnCreateObjectFunctionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Action:
  #             - sts:AssumeRole
  #           Principal:
  #             Service:
  #               - lambda.amazonaws.com
  #     Policies:
  #       - PolicyName: LogGroupAccess
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/abr-DefaultBucketOnCreateObjectFunction:*"
  #               Action:
  #                 - logs:CreateLogGroup
  #       - PolicyName: LogStreamAccess
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DefaultBucketOnCreateObjectFunction:*"
  #               Action:
  #                 - logs:CreateLogStream
  #                 - logs:PutLogEvents

  # DefaultBucketOnCreateObjectFunctionPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     Action: 'lambda:InvokeFunction'
  #     FunctionName: !GetAtt DefaultBucketOnCreateObjectFunction.Arn
  #     Principal: s3.amazonaws.com
  #     SourceAccount: !Ref AWS::AccountId
  #     SourceArn: !Sub
  #       - "arn:${AWS::Partition}:s3:::${Bucket}"
  #       - Bucket: !Ref "DefaultBucket"