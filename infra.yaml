AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Description: an aerosol consisting of a visible mass of miniature liquid droplets, frozen crystals, or other particles suspended in the atmosphere of a planetary body or similar space.

Resources:
  DefaultBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-default"
      AccessControl: BucketOwnerFullControl
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
            Status: Enabled
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: image
            Function: !GetAtt DefaultBucketOnCreateObjectFunction.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE

  DefaultBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DefaultBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub
              - "arn:${AWS::Partition}:s3:::${Bucket}/*"
              - Bucket: !Ref "DefaultBucket"
            Principal:
              CanonicalUser: !GetAtt DefaultBucketCloudFrontOriginAccessIdentity.S3CanonicalUserId

  DefaultBucketCloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: DefaultBucketCloudFrontOriginAccessIdentity

  LambdaFunctionBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-lambda-functions"
      AccessControl: BucketOwnerFullControl
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
            Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: TRUE
        BlockPublicPolicy: TRUE
        IgnorePublicAcls: TRUE
        RestrictPublicBuckets: TRUE

  PrimaryDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: !Ref DefaultBucket
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6" # CachingOptimized: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          ViewerProtocolPolicy: redirect-to-https
        Origins:
          - Id: !Ref DefaultBucket
            DomainName: !Sub
              - "${Bucket}.s3.${AWS::Region}.${AWS::URLSuffix}"
              - Bucket: !Ref DefaultBucket
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - "origin-access-identity/cloudfront/${Identity}"
                - Identity: !Ref DefaultBucketCloudFrontOriginAccessIdentity

  DefaultBucketOnCreateObjectFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt DefaultBucketOnCreateObjectFunction.Arn
      Principal: s3.amazonaws.com
      SourceArn: !Sub
        - "arn:${AWS::Partition}:s3:::${Bucket}"
        - Bucket: !Ref "DefaultBucket"
      SourceAccount: !Ref AWS::AccountId

  DefaultBucketOnCreateObjectFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  
  DefaultBucketOnCreateObjectFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: default-bucket-on-create-object/latest/index.js.zip
      Handler: index.handler
      PackageType: Zip
      Role: !GetAtt DefaultBucketOnCreateObjectFunctionRole.Arn
      Runtime: nodejs16.x