AWSTemplateFormatVersion: 2010-09-09


Description: an aerosol consisting of a visible mass of miniature liquid droplets, frozen crystals, or other particles suspended in the atmosphere of a planetary body or similar space.


Parameters:
  IsFirstRun:
    Default: 'false'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

  UseAuxiliaryOriginRequestEdgeFunction:
    Default: 'false'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

  UseAuxiliaryOriginResponseEdgeFunction:
    Default: 'false'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

  PrimaryDistributionExists:
    Default: 'false'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

  DefaultBucketObjectCreatedFunctionArn:
    Default: ''
    Type: String
    AllowedPattern: '^(arn:aws:lambda:(us-east-1|us-west-2):\d{12}:function:[A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-DefaultBucketObjectCreatedFunction)?$'

  DefaultBucketObjectCreatedFunctionSemanticVersion:
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

  AuxiliaryPrimaryOriginRequestEdgeFunctionName:
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnOriginRequest_v\d+-\d+-\d+-auxiliary)?$'

  AuxiliaryPrimaryOriginRequestEdgeFunctionSemanticVersion:
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

  PrimaryOriginRequestEdgeFunctionName:
    # Default: ''
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnOriginRequest_v\d+-\d+-\d+)?$'

  PrimaryOriginRequestEdgeFunctionSemanticVersion:
    # Default: ''
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

  AuxiliaryPrimaryOriginResponseEdgeFunctionName:
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnOriginResponse_v\d+-\d+-\d+-auxiliary)?$'

  AuxiliaryPrimaryOriginResponseEdgeFunctionSemanticVersion:
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

  PrimaryOriginResponseEdgeFunctionName:
    # Default: ''
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnOriginResponse_v\d+-\d+-\d+)?$'

  PrimaryOriginResponseEdgeFunctionSemanticVersion:
    # Default: ''
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

########################################################################

Conditions:
  IsNotFirstRun: !Equals
    - 'false'
    - !Ref IsFirstRun

  CreateOriginAccessControl: !Equals
    - 'true'
    - !Ref PrimaryDistributionExists

  DoUseAuxiliaryOriginRequestEdgeFunction: !Equals
    - 'true'
    - !Ref UseAuxiliaryOriginRequestEdgeFunction

  DoUseAuxiliaryOriginResponseEdgeFunction: !Equals
    - 'true'
    - !Ref UseAuxiliaryOriginResponseEdgeFunction

  DefaultBucketObjectCreatedFunctionArnDoesNotExist: !Equals
    - ''
    - !Ref DefaultBucketObjectCreatedFunctionArn

########################################################################

Resources:
  LambdaFunctionBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-lambda-function"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DefaultBucket:
    Type: AWS::S3::Bucket
    Condition: IsNotFirstRun
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-default"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
      NotificationConfiguration: !If
        - DefaultBucketObjectCreatedFunctionArnDoesNotExist
        - !Ref 'AWS::NoValue'
        - LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            # Filter:
            #   S3Key:
            #     Rules:
            #       - Name: prefix
            #         Value: image
            Function: !Ref DefaultBucketObjectCreatedFunctionArn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DefaultBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsNotFirstRun
    Properties:
      Bucket: !Ref DefaultBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub
                  - "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${DistributionId}"
                  - DistributionId: !GetAtt 'PrimaryDistribution.Id'
            Principal:
              Service:
                - 'cloudfront.amazonaws.com'
            Resource: !Sub
              - "arn:${AWS::Partition}:s3:::${Bucket}/*"
              - Bucket: !Ref "DefaultBucket"
  
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryDistributionCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Condition: IsNotFirstRun
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Sub "${AWS::StackName}-PrimaryDistributionCachePolicy"
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          CookiesConfig:
            CookieBehavior: 'none'
          HeadersConfig:
            HeaderBehavior: 'none'
          QueryStringsConfig:
            QueryStringBehavior: 'whitelist'
            QueryStrings:
              - 'tabletennis'

  PrimaryDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: IsNotFirstRun
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultCacheBehavior:
          CachePolicyId: !GetAtt PrimaryDistributionCachePolicy.Id
          Compress: true
          TargetOriginId: !Ref DefaultBucket
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-request
              IncludeBody: true
              LambdaFunctionARN: !If
                - DoUseAuxiliaryOriginRequestEdgeFunction
                - !Sub
                  - "${FunctionArn}:${Version}"
                  - FunctionArn: !GetAtt AuxiliaryPrimaryOriginRequestEdgeFunction.Arn
                    Version: !GetAtt AuxiliaryPrimaryOriginRequestEdgeFunctionVersion.Version
                - !Sub
                  - "${FunctionArn}:${Version}"
                  - FunctionArn: !GetAtt PrimaryOriginRequestEdgeFunction.Arn
                    Version: !GetAtt PrimaryOriginRequestEdgeFunctionVersion.Version
            - EventType: origin-response
              LambdaFunctionARN: !If
                - DoUseAuxiliaryOriginResponseEdgeFunction
                - !Sub
                  - "${FunctionArn}:${Version}"
                  - FunctionArn: !GetAtt AuxiliaryPrimaryOriginResponseEdgeFunction.Arn
                    Version: !GetAtt AuxiliaryPrimaryOriginResponseEdgeFunctionVersion.Version
                - !Sub
                  - "${FunctionArn}:${Version}"
                  - FunctionArn: !GetAtt PrimaryOriginResponseEdgeFunction.Arn
                    Version: !GetAtt PrimaryOriginResponseEdgeFunctionVersion.Version
        Origins:
          - Id: !Ref DefaultBucket
            S3OriginConfig:
              OriginAccessIdentity: ''
            DomainName: !Sub
              - "${Bucket}.s3.${AWS::Region}.${AWS::URLSuffix}"
              - Bucket: !Ref DefaultBucket
            OriginAccessControlId: !If
              - CreateOriginAccessControl
              - !GetAtt DefaultBucketCloudFrontOriginAccessControl.Id
              - !Ref 'AWS::NoValue'
  
  DefaultBucketCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Condition: CreateOriginAccessControl
    Properties: 
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  AuxiliaryPrimaryOriginRequestEdgeFunction:
    Type: AWS::Lambda::Function
    Condition: DoUseAuxiliaryOriginRequestEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref AuxiliaryPrimaryOriginRequestEdgeFunctionName
      Handler: index.handler
      Role: !GetAtt PrimaryOriginRequestEdgeFunctionRole.Arn
      Runtime: nodejs14.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-request/${Version}/index.js.zip"
          - Version: !Ref AuxiliaryPrimaryOriginRequestEdgeFunctionSemanticVersion

  AuxiliaryPrimaryOriginRequestEdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: DoUseAuxiliaryOriginRequestEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref AuxiliaryPrimaryOriginRequestEdgeFunctionSemanticVersion
      FunctionName: !GetAtt AuxiliaryPrimaryOriginRequestEdgeFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  AuxiliaryPrimaryOriginResponseEdgeFunction:
    Type: AWS::Lambda::Function
    Condition: DoUseAuxiliaryOriginResponseEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref AuxiliaryPrimaryOriginResponseEdgeFunctionName
      Handler: index.handler
      Role: !GetAtt PrimaryOriginResponseEdgeFunctionRole.Arn
      Runtime: nodejs14.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-response/${Version}/index.js.zip"
          - Version: !Ref AuxiliaryPrimaryOriginResponseEdgeFunctionSemanticVersion

  AuxiliaryPrimaryOriginResponseEdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: DoUseAuxiliaryOriginResponseEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref AuxiliaryPrimaryOriginResponseEdgeFunctionSemanticVersion
      FunctionName: !GetAtt AuxiliaryPrimaryOriginResponseEdgeFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryOriginRequestEdgeFunction:
    Type: AWS::Lambda::Function
    Condition: IsNotFirstRun
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref PrimaryOriginRequestEdgeFunctionName
      Handler: index.handler
      Role: !GetAtt PrimaryOriginRequestEdgeFunctionRole.Arn
      Runtime: nodejs14.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-request/${Version}/index.js.zip"
          - Version: !Ref PrimaryOriginRequestEdgeFunctionSemanticVersion

  PrimaryOriginRequestEdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: IsNotFirstRun
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref PrimaryOriginRequestEdgeFunctionSemanticVersion
      FunctionName: !GetAtt PrimaryOriginRequestEdgeFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryOriginResponseEdgeFunction:
    Type: AWS::Lambda::Function
    Condition: IsNotFirstRun
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref PrimaryOriginResponseEdgeFunctionName
      Handler: index.handler
      Role: !GetAtt PrimaryOriginResponseEdgeFunctionRole.Arn
      Runtime: nodejs14.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-response/${Version}/index.js.zip"
          - Version: !Ref PrimaryOriginResponseEdgeFunctionSemanticVersion

  PrimaryOriginResponseEdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: IsNotFirstRun
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref PrimaryOriginResponseEdgeFunctionSemanticVersion
      FunctionName: !GetAtt PrimaryOriginResponseEdgeFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryOriginRequestEdgeFunctionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*.${AWS::StackName}-OnOriginRequest_v*"

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryOriginResponseEdgeFunctionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*.${AWS::StackName}-OnOriginResponse_v*"

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  DefaultBucketObjectCreatedFunction:
    Type: AWS::Lambda::Function
    Condition: IsNotFirstRun
    Properties:
      FunctionName: !Sub "${AWS::StackName}-DefaultBucketObjectCreatedFunction"
      Handler: index.handler
      Role: !GetAtt DefaultBucketObjectCreatedFunctionRole.Arn
      Runtime: nodejs14.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-create-object/${Version}/index.js.zip"
          - Version: !Ref DefaultBucketObjectCreatedFunctionSemanticVersion

  DefaultBucketObjectCreatedFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DefaultBucketObjectCreatedFunction*"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents

  DefaultBucketObjectCreatedFunctionPermission:
    Type: AWS::Lambda::Permission
    Condition: IsNotFirstRun
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt DefaultBucketObjectCreatedFunction.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub
        - "arn:${AWS::Partition}:s3:::${Bucket}"
        - Bucket: !Ref "DefaultBucket"