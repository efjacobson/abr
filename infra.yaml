AWSTemplateFormatVersion: 2010-09-09


Description: an aerosol consisting of a visible mass of miniature liquid droplets, frozen crystals, or other particles suspended in the atmosphere of a planetary body or similar space.


Parameters:
  PrimaryHostedZoneName:
    Type: String
    AllowedPattern: '^[A-Za-z]+\.[A-Za-z]+\.[A-Za-z]+$'

  PrimaryCertificateDomainName:
    Type: String
    AllowedPattern: '^([A-Za-z]+|\*)\.[A-Za-z]+\.[A-Za-z]+$'

  WebsiteSubdomain:
    Type: String
    AllowedPattern: '^[A-Za-z]+$'

  WebsiteDomain:
    Type: String
    AllowedPattern: '^[A-Za-z]+$'

  WebsiteTLD:
    Type: String
    AllowedPattern: '^[A-Za-z]+$'

  IsFirstRun:
    Default: 'false'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

  UseAuxiliaryOriginRequestEdgeFunction:
    Default: 'false'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

  UseAuxiliaryViewerRequestEdgeFunction:
    Default: 'false'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

  UseAuxiliaryOriginResponseEdgeFunction:
    Default: 'false'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

  CreateViewerRequestEdgeFunction:
    Default: 'false'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

  PrimaryDistributionExists:
    Default: 'false'
    Type: String
    AllowedValues:
      - 'true'
      - 'false'

  DefaultBucketObjectCreatedFunctionArn:
    Default: ''
    Type: String
    AllowedPattern: '^(arn:aws:lambda:(us-east-1|us-west-2):\d{12}:function:[A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-DefaultBucketObjectCreatedFunction)?$'

  DefaultBucketObjectCreatedFunctionSemanticVersion:
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

  AuxiliaryPrimaryOriginRequestEdgeFunctionName:
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnOriginRequest_v\d+-\d+-\d+-auxiliary)?$'

  AuxiliaryPrimaryViewerRequestEdgeFunctionName:
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnViewerRequest_v\d+-\d+-\d+-auxiliary)?$'

  AuxiliaryPrimaryOriginRequestEdgeFunctionSemanticVersion:
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

  AuxiliaryPrimaryViewerRequestEdgeFunctionSemanticVersion:
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

  PrimaryOriginRequestEdgeFunctionName:
    # Default: ''
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnOriginRequest_v\d+-\d+-\d+)?$'

  PrimaryViewerRequestEdgeFunctionName:
    # Default: ''
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnViewerRequest_v\d+-\d+-\d+)?$'

  PrimaryOriginRequestEdgeFunctionSemanticVersion:
    # Default: ''
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

  PrimaryViewerRequestEdgeFunctionSemanticVersion:
    # Default: ''
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

  AuxiliaryPrimaryOriginResponseEdgeFunctionName:
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnOriginResponse_v\d+-\d+-\d+-auxiliary)?$'

  AuxiliaryPrimaryOriginResponseEdgeFunctionSemanticVersion:
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

  PrimaryOriginResponseEdgeFunctionName:
    # Default: ''
    Type: String
    AllowedPattern: '^([A-Za-z]+[A-Za-z-]*-(us-east-1|us-west-2)-OnOriginResponse_v\d+-\d+-\d+)?$'

  PrimaryOriginResponseEdgeFunctionSemanticVersion:
    # Default: ''
    Type: String
    AllowedPattern: '^(v\d+\.\d+\.\d+)?$'

########################################################################

Conditions:
  IsNotFirstRun: !Equals
    - 'false'
    - !Ref IsFirstRun

  CreateOriginAccessControl: !Equals
    - 'true'
    - !Ref PrimaryDistributionExists

  DoUseAuxiliaryOriginRequestEdgeFunction: !Equals
    - 'true'
    - !Ref UseAuxiliaryOriginRequestEdgeFunction

  DoCreateViewerRequestEdgeFunction: !And
    - !Equals
      - 'true'
      - !Ref CreateViewerRequestEdgeFunction
    - !Equals
      - 'false'
      - !Ref IsFirstRun

  DoUseAuxiliaryViewerRequestEdgeFunction: !And
    - !Equals
      - 'true'
      - !Ref UseAuxiliaryViewerRequestEdgeFunction
    - !Equals
      - 'true'
      - !Ref CreateViewerRequestEdgeFunction

  DoUseAuxiliaryOriginResponseEdgeFunction: !Equals
    - 'true'
    - !Ref UseAuxiliaryOriginResponseEdgeFunction

  DefaultBucketObjectCreatedFunctionArnDoesNotExist: !Equals
    - ''
    - !Ref DefaultBucketObjectCreatedFunctionArn

########################################################################

Resources:
  LambdaFunctionBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-lambda-function"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Sub
        - "${AWS::AccountId}-${WebsiteSubdomain}-${WebsiteDomain}-${WebsiteTLD}"
        - WebsiteSubdomain: !Ref WebsiteSubdomain
          WebsiteDomain: !Ref WebsiteDomain
          WebsiteTLD: !Ref WebsiteTLD
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      WebsiteConfiguration:
        IndexDocument: index.html


  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsNotFirstRun
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub
                  - "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${DistributionId}"
                  - DistributionId: !GetAtt 'WebsiteDistribution.Id'
            Principal:
              Service:
                - 'cloudfront.amazonaws.com'
            Resource: !Sub
              - "arn:${AWS::Partition}:s3:::${Bucket}/*"
              - Bucket: !Ref "WebsiteBucket"

  DefaultBucket:
    Type: AWS::S3::Bucket
    Condition: IsNotFirstRun
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Sub "${AWS::AccountId}-${AWS::StackName}-default"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 2
      NotificationConfiguration: !If
        - DefaultBucketObjectCreatedFunctionArnDoesNotExist
        - !Ref 'AWS::NoValue'
        - LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            # Filter:
            #   S3Key:
            #     Rules:
            #       - Name: prefix
            #         Value: image
            Function: !Ref DefaultBucketObjectCreatedFunctionArn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  DefaultBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: IsNotFirstRun
    Properties:
      Bucket: !Ref DefaultBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub
                  - "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${DistributionId}"
                  - DistributionId: !GetAtt 'PrimaryDistribution.Id'
            Principal:
              Service:
                - 'cloudfront.amazonaws.com'
            Resource: !Sub
              - "arn:${AWS::Partition}:s3:::${Bucket}/*"
              - Bucket: !Ref "DefaultBucket"
  
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryDistributionCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Condition: IsNotFirstRun
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Sub "${AWS::StackName}-PrimaryDistributionCachePolicy"
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          CookiesConfig:
            CookieBehavior: 'none'
          HeadersConfig:
            HeaderBehavior: 'none'
          QueryStringsConfig:
            QueryStringBehavior: 'whitelist'
            QueryStrings:
              - 'ping'

  WebsiteDistributionCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Condition: IsNotFirstRun
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Sub "${AWS::StackName}-WebsiteDistributionCachePolicy"
        ParametersInCacheKeyAndForwardedToOrigin:
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          CookiesConfig:
            CookieBehavior: 'none'
          HeadersConfig:
            HeaderBehavior: 'none'
          QueryStringsConfig:
            QueryStringBehavior: 'none'

  WebsiteResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub
        - "${AWS::AccountId}-${WebsiteSubdomain}-${WebsiteDomain}-${WebsiteTLD}-response-headers-policy"
        - WebsiteSubdomain: !Ref WebsiteSubdomain
          WebsiteDomain: !Ref WebsiteDomain
          WebsiteTLD: !Ref WebsiteTLD
        SecurityHeadersConfig:
          # StrictTransportSecurity:
          #   AccessControlMaxAgeSec: 63072000
          #   IncludeSubdomains: true
          #   Override: true
          #   Preload: true
          # ContentSecurityPolicy:
          #   ContentSecurityPolicy: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"
          #   Override: true
          # ContentTypeOptions:
          #   Override: true
          # FrameOptions:
          #   FrameOption: DENY
          #   Override: true
          # ReferrerPolicy:
          #   ReferrerPolicy: 'same-origin'
          #   Override: true
          XSSProtection:
            ModeBlock: true
            Override: true
            Protection: true

  WebsiteDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: 'http2'
        IPV6Enabled: true
        PriceClass: 'PriceClass_All'
        Aliases:
          - !Sub
            - "${WebsiteSubdomain}.${WebsiteDomain}.${WebsiteTLD}"
            - WebsiteSubdomain: !Ref WebsiteSubdomain
              WebsiteDomain: !Ref WebsiteDomain
              WebsiteTLD: !Ref WebsiteTLD
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
          - ErrorCachingMinTTL: 60
            ErrorCode: 403
            ResponseCode: 403
            ResponsePagePath: '/403.html'
        DefaultCacheBehavior:
          CachePolicyId: !GetAtt WebsiteDistributionCachePolicy.Id
          Compress: true
          TargetOriginId: !Ref WebsiteBucket
          ViewerProtocolPolicy: 'redirect-to-https'
          ResponseHeadersPolicyId: !Ref WebsiteResponseHeadersPolicy
        Origins:
          - DomainName: !GetAtt WebsiteBucket.DomainName
            Id: !Ref WebsiteBucket
            OriginAccessControlId: !GetAtt WebsiteBucketCloudFrontOriginAccessControl.Id
            S3OriginConfig: {}
        ViewerCertificate:
          AcmCertificateArn: !Ref 'Certificate'
          MinimumProtocolVersion: 'TLSv1.1_2016'
          SslSupportMethod: 'sni-only'
        # Logging:
        #   Bucket: !Ref 'S3BucketLogsName'
        #   IncludeCookies: false
        #   Prefix: 'cdn/'
        # Aliases:
        #   - !Sub '${SubDomain}.${DomainName}'
        #   - !If [CreateApexConfig, !Ref DomainName, !Ref 'AWS::NoValue']

  PrimaryDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: IsNotFirstRun
    Properties:
      DistributionConfig:
        Enabled: true
        HttpVersion: 'http2'
        IPV6Enabled: true
        PriceClass: 'PriceClass_All'
        Aliases:
          - !Ref "PrimaryHostedZoneName"
        DefaultCacheBehavior:
          CachePolicyId: !GetAtt PrimaryDistributionCachePolicy.Id
          Compress: true
          TargetOriginId: !Ref DefaultBucket
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations: !If
            - DoCreateViewerRequestEdgeFunction
            - - EventType: viewer-request
                IncludeBody: true
                LambdaFunctionARN: !If
                  - DoUseAuxiliaryViewerRequestEdgeFunction
                  - !Sub
                    - "${FunctionArn}:${Version}"
                    - FunctionArn: !GetAtt AuxiliaryPrimaryViewerRequestEdgeFunction.Arn
                      Version: !GetAtt AuxiliaryPrimaryViewerRequestEdgeFunctionVersion.Version
                  - !Sub
                    - "${FunctionArn}:${Version}"
                    - FunctionArn: !GetAtt PrimaryViewerRequestEdgeFunction.Arn
                      Version: !GetAtt PrimaryViewerRequestEdgeFunctionVersion.Version
              - EventType: origin-request
                IncludeBody: true
                LambdaFunctionARN: !If
                  - DoUseAuxiliaryOriginRequestEdgeFunction
                  - !Sub
                    - "${FunctionArn}:${Version}"
                    - FunctionArn: !GetAtt AuxiliaryPrimaryOriginRequestEdgeFunction.Arn
                      Version: !GetAtt AuxiliaryPrimaryOriginRequestEdgeFunctionVersion.Version
                  - !Sub
                    - "${FunctionArn}:${Version}"
                    - FunctionArn: !GetAtt PrimaryOriginRequestEdgeFunction.Arn
                      Version: !GetAtt PrimaryOriginRequestEdgeFunctionVersion.Version
              - EventType: origin-response
                LambdaFunctionARN: !If
                  - DoUseAuxiliaryOriginResponseEdgeFunction
                  - !Sub
                    - "${FunctionArn}:${Version}"
                    - FunctionArn: !GetAtt AuxiliaryPrimaryOriginResponseEdgeFunction.Arn
                      Version: !GetAtt AuxiliaryPrimaryOriginResponseEdgeFunctionVersion.Version
                  - !Sub
                    - "${FunctionArn}:${Version}"
                    - FunctionArn: !GetAtt PrimaryOriginResponseEdgeFunction.Arn
                      Version: !GetAtt PrimaryOriginResponseEdgeFunctionVersion.Version
            - - EventType: origin-request
                IncludeBody: true
                LambdaFunctionARN: !If
                  - DoUseAuxiliaryOriginRequestEdgeFunction
                  - !Sub
                    - "${FunctionArn}:${Version}"
                    - FunctionArn: !GetAtt AuxiliaryPrimaryOriginRequestEdgeFunction.Arn
                      Version: !GetAtt AuxiliaryPrimaryOriginRequestEdgeFunctionVersion.Version
                  - !Sub
                    - "${FunctionArn}:${Version}"
                    - FunctionArn: !GetAtt PrimaryOriginRequestEdgeFunction.Arn
                      Version: !GetAtt PrimaryOriginRequestEdgeFunctionVersion.Version
              - EventType: origin-response
                LambdaFunctionARN: !If
                  - DoUseAuxiliaryOriginResponseEdgeFunction
                  - !Sub
                    - "${FunctionArn}:${Version}"
                    - FunctionArn: !GetAtt AuxiliaryPrimaryOriginResponseEdgeFunction.Arn
                      Version: !GetAtt AuxiliaryPrimaryOriginResponseEdgeFunctionVersion.Version
                  - !Sub
                    - "${FunctionArn}:${Version}"
                    - FunctionArn: !GetAtt PrimaryOriginResponseEdgeFunction.Arn
                      Version: !GetAtt PrimaryOriginResponseEdgeFunctionVersion.Version
        CacheBehaviors:
          - CachePolicyId: !GetAtt PrimaryDistributionCachePolicy.Id
            AllowedMethods: 
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            Compress: true
            TargetOriginId: !Ref DefaultBucket
            ViewerProtocolPolicy: redirect-to-https
            PathPattern: '/lol'
            LambdaFunctionAssociations: !If
              - DoCreateViewerRequestEdgeFunction
              - - EventType: viewer-request
                  IncludeBody: true
                  LambdaFunctionARN: !If
                    - DoUseAuxiliaryViewerRequestEdgeFunction
                    - !Sub
                      - "${FunctionArn}:${Version}"
                      - FunctionArn: !GetAtt AuxiliaryPrimaryViewerRequestEdgeFunction.Arn
                        Version: !GetAtt AuxiliaryPrimaryViewerRequestEdgeFunctionVersion.Version
                    - !Sub
                      - "${FunctionArn}:${Version}"
                      - FunctionArn: !GetAtt PrimaryViewerRequestEdgeFunction.Arn
                        Version: !GetAtt PrimaryViewerRequestEdgeFunctionVersion.Version
              - !Ref 'AWS::NoValue'
        Origins:
          - Id: !Ref DefaultBucket
            S3OriginConfig:
              OriginAccessIdentity: ''
            DomainName: !Sub
              - "${Bucket}.s3.${AWS::Region}.${AWS::URLSuffix}"
              - Bucket: !Ref DefaultBucket
            OriginAccessControlId: !If
              - CreateOriginAccessControl
              - !GetAtt DefaultBucketCloudFrontOriginAccessControl.Id
              - !Ref 'AWS::NoValue'
        ViewerCertificate:
          AcmCertificateArn: !Ref "Certificate"
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
  
  DefaultBucketCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Condition: CreateOriginAccessControl
    Properties: 
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-DefaultBucketCloudFrontOriginAccessControl"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  
  WebsiteBucketCloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Condition: CreateOriginAccessControl
    Properties: 
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-WebsiteBucketCloudFrontOriginAccessControl"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  AuxiliaryPrimaryOriginRequestEdgeFunction:
    Type: AWS::Lambda::Function
    Condition: DoUseAuxiliaryOriginRequestEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref AuxiliaryPrimaryOriginRequestEdgeFunctionName
      Handler: index.handler
      Role: !GetAtt PrimaryOriginRequestEdgeFunctionRole.Arn
      Runtime: nodejs18.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-request/${Version}/index.js.zip"
          - Version: !Ref AuxiliaryPrimaryOriginRequestEdgeFunctionSemanticVersion

  AuxiliaryPrimaryOriginRequestEdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: DoUseAuxiliaryOriginRequestEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref AuxiliaryPrimaryOriginRequestEdgeFunctionSemanticVersion
      FunctionName: !GetAtt AuxiliaryPrimaryOriginRequestEdgeFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  AuxiliaryPrimaryViewerRequestEdgeFunction:
    Type: AWS::Lambda::Function
    Condition: DoUseAuxiliaryViewerRequestEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref AuxiliaryPrimaryViewerRequestEdgeFunctionName
      Handler: index.handler
      Role: !GetAtt PrimaryViewerRequestEdgeFunctionRole.Arn
      Runtime: nodejs18.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-viewer-request/${Version}/index.js.zip"
          - Version: !Ref AuxiliaryPrimaryViewerRequestEdgeFunctionSemanticVersion

  AuxiliaryPrimaryViewerRequestEdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: DoUseAuxiliaryViewerRequestEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref AuxiliaryPrimaryViewerRequestEdgeFunctionSemanticVersion
      FunctionName: !GetAtt AuxiliaryPrimaryViewerRequestEdgeFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  AuxiliaryPrimaryOriginResponseEdgeFunction:
    Type: AWS::Lambda::Function
    Condition: DoUseAuxiliaryOriginResponseEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref AuxiliaryPrimaryOriginResponseEdgeFunctionName
      Handler: index.handler
      Role: !GetAtt PrimaryOriginResponseEdgeFunctionRole.Arn
      Runtime: nodejs18.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-response/${Version}/index.js.zip"
          - Version: !Ref AuxiliaryPrimaryOriginResponseEdgeFunctionSemanticVersion

  AuxiliaryPrimaryOriginResponseEdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: DoUseAuxiliaryOriginResponseEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref AuxiliaryPrimaryOriginResponseEdgeFunctionSemanticVersion
      FunctionName: !GetAtt AuxiliaryPrimaryOriginResponseEdgeFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryOriginRequestEdgeFunction:
    Type: AWS::Lambda::Function
    Condition: IsNotFirstRun
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref PrimaryOriginRequestEdgeFunctionName
      Handler: index.handler
      Role: !GetAtt PrimaryOriginRequestEdgeFunctionRole.Arn
      Runtime: nodejs18.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-request/${Version}/index.js.zip"
          - Version: !Ref PrimaryOriginRequestEdgeFunctionSemanticVersion

  PrimaryOriginRequestEdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: IsNotFirstRun
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref PrimaryOriginRequestEdgeFunctionSemanticVersion
      FunctionName: !GetAtt PrimaryOriginRequestEdgeFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryViewerRequestEdgeFunction:
    Type: AWS::Lambda::Function
    Condition: DoCreateViewerRequestEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref PrimaryViewerRequestEdgeFunctionName
      Handler: index.handler
      Role: !GetAtt PrimaryViewerRequestEdgeFunctionRole.Arn
      Runtime: nodejs18.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-viewer-request/${Version}/index.js.zip"
          - Version: !Ref PrimaryViewerRequestEdgeFunctionSemanticVersion

  PrimaryViewerRequestEdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: DoCreateViewerRequestEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref PrimaryViewerRequestEdgeFunctionSemanticVersion
      FunctionName: !GetAtt PrimaryViewerRequestEdgeFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryOriginResponseEdgeFunction:
    Type: AWS::Lambda::Function
    Condition: IsNotFirstRun
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Ref PrimaryOriginResponseEdgeFunctionName
      Handler: index.handler
      Role: !GetAtt PrimaryOriginResponseEdgeFunctionRole.Arn
      Runtime: nodejs18.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-origin-response/${Version}/index.js.zip"
          - Version: !Ref PrimaryOriginResponseEdgeFunctionSemanticVersion

  PrimaryOriginResponseEdgeFunctionVersion:
    Type: AWS::Lambda::Version
    Condition: IsNotFirstRun
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: !Ref PrimaryOriginResponseEdgeFunctionSemanticVersion
      FunctionName: !GetAtt PrimaryOriginResponseEdgeFunction.Arn

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryOriginRequestEdgeFunctionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*.${AWS::StackName}-OnOriginRequest_v*"

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryViewerRequestEdgeFunctionRole:
    Type: AWS::IAM::Role
    Condition: DoCreateViewerRequestEdgeFunction
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*.${AWS::StackName}-OnViewerRequest_v*"

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  PrimaryOriginResponseEdgeFunctionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - edgelambda.amazonaws.com
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:${AWS::Partition}:logs:*:${AWS::AccountId}:log-group:/aws/lambda/*.${AWS::StackName}-OnOriginResponse_v*"

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  DefaultBucketObjectCreatedFunction:
    Type: AWS::Lambda::Function
    Condition: IsNotFirstRun
    Properties:
      FunctionName: !Sub "${AWS::StackName}-DefaultBucketObjectCreatedFunction"
      Handler: index.handler
      Role: !GetAtt DefaultBucketObjectCreatedFunctionRole.Arn
      Runtime: nodejs18.x # nodejs16.x
      Code:
        S3Bucket: !Ref LambdaFunctionBucket
        S3Key: !Sub
          - "default-bucket-on-create-object/${Version}/index.js.zip"
          - Version: !Ref DefaultBucketObjectCreatedFunctionSemanticVersion

  DefaultBucketObjectCreatedFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DefaultBucketObjectCreatedFunction*"
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents

  DefaultBucketObjectCreatedFunctionPermission:
    Type: AWS::Lambda::Permission
    Condition: IsNotFirstRun
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt DefaultBucketObjectCreatedFunction.Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub
        - "arn:${AWS::Partition}:s3:::${Bucket}"
        - Bucket: !Ref "DefaultBucket"

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  DefaultBucketUploaderUser:
    Type: AWS::IAM::User
    Properties:
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Action: s3:ListAllMyBuckets
              - Effect: Allow
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${Bucket}"
                  - Bucket: !Ref "DefaultBucket"
                Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
              - Effect: Allow
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${Bucket}/*"
                  - Bucket: !Ref "DefaultBucket"
                Action:
                  - s3:GetObject
                  - s3:GetObjectAcl
        - PolicyName: S3WriteAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Sub
                  - "arn:${AWS::Partition}:s3:::${Bucket}/*"
                  - Bucket: !Ref "DefaultBucket"
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                  - s3:DeleteObject
        - PolicyName: CloudFormationAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: !Ref "AWS::StackId"
                Action:
                  - cloudformation:DescribeStacks

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref "PrimaryHostedZoneName"
  
  WebsiteHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub
        - "${WebsiteSubdomain}.${WebsiteDomain}.${WebsiteTLD}"
        - WebsiteSubdomain: !Ref WebsiteSubdomain
          WebsiteDomain: !Ref WebsiteDomain
          WebsiteTLD: !Ref WebsiteTLD

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref "PrimaryCertificateDomainName"
      ValidationMethod: 'DNS'
